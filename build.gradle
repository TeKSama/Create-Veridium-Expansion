plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    // Create & Registrate
codex/check-installation-of-create-6.0-api-ycc5ag
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://maven.createmod.net" }
    maven { url = "https://modmaven.dev" }
=======
    maven {
        url = "https://maven.tterrag.com/"
    }
main
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Create (6.x) â€” slim classifier
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") {
        transitive = false
    }
    // Full Create jar for runtime (contains assets & data)
    runtimeOnly fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}")

    // Registrate
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            forge_version           : forge_version,
            forge_version_range     : forge_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
